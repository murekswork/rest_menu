version: '3.0'
services:
  api:
    build: .
    container_name: 'api'
    command: >
      sh -c "alembic revision --autogenerate && alembic upgrade heads &&
             uvicorn main:app --host 0.0.0.0"

    ports:
      - 8000:8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      celery_worker:
        condition: service_started
      celery_beat:
        condition: service_started
      rabbitmq:
        condition: service_started
    volumes:
      - ./.env:/api/.env
    networks:
      - custom
    env_file:
      - .env

  api_test:
    build: .
    container_name: api_tes
    command: >
      sh -c "export PYTHONPATH=/code &&
             cd tests &&
             alembic revision --autogenerate &&
             alembic upgrade heads &&
             pytest -s -v"
    depends_on:
      postgres_test:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./env:/api/.env
    networks:
      - test
    env_file:
      - .env

  postgres:
    image: postgres:15.1-alpine
    container_name: 'postgres'
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB}
      POSTGRES_HOST_AUTH_METHOD: ${DB_AUTH_METHOD}
    user: postgres
    ports:
      - 5432:5432
    expose:
      - 5432
    networks:
      - custom
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "${DB_USER}", "-d", "${DB}" ]
      interval: 10s
      timeout: 30s
      retries: 5

  redis:
    image: redis:latest
    hostname: redis
    ports:
      - 6379:6379
    networks:
      - custom
      - test

  postgres_test:
    image: postgres:15.1-alpine
    container_name: 'postgres_tes'
    restart: always
    environment:
      POSTGRES_USER: ${DB_TEST_USER}
      POSTGRES_PASSWORD: ${DB_TEST_PASSWORD}
      POSTGRES_DB: ${DB_TEST}
      POSTGRES_HOST_AUTH_METHOD: ${DB_TEST_AUTH_METHOD}
    ports:
      - 5433:5432
    expose:
      - 5433
    networks:
      - test
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${DB_TEST} -U $${DB_TEST_USER}"]
      interval: 10s
      timeout: 30s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.11.28-management
    ports:
      - 5672:5672
      - 15672:15672
    hostname: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: ${RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS}
    env_file:
      - .env
    networks:
      - custom
      - test

  celery_worker:
    build:
      context: .
    entrypoint: celery
    command: -A celery_conf.celery_app.app worker --loglevel=info
    depends_on:
      rabbitmq:
        condition: service_started
    networks:
      - custom
      - test
    volumes:
      - ./env:/api/.env
    env_file:
      - .env

  celery_beat:
    build:
      context: .
    entrypoint: celery
    command: -A celery_conf.celery_app beat --loglevel=info
    networks:
      - custom
      - test
    depends_on:
      celery_worker:
        condition: service_started
    volumes:
      - ./env:/api/.env
    env_file:
      - .env

networks:
  custom:
    driver: bridge
  test:
    driver: bridge
